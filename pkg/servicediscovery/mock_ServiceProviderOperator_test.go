// Code generated by mockery v2.26.1. DO NOT EDIT.

package servicediscovery

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockServiceProviderOperator is an autogenerated mock type for the ServiceProviderOperator type
type MockServiceProviderOperator struct {
	mock.Mock
}

type MockServiceProviderOperator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceProviderOperator) EXPECT() *MockServiceProviderOperator_Expecter {
	return &MockServiceProviderOperator_Expecter{mock: &_m.Mock}
}

// RegisterHealthStatus provides a mock function with given fields: ctx, status
func (_m *MockServiceProviderOperator) RegisterHealthStatus(ctx context.Context, status HealthStatus) error {
	ret := _m.Called(ctx, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, HealthStatus) error); ok {
		r0 = rf(ctx, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServiceProviderOperator_RegisterHealthStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterHealthStatus'
type MockServiceProviderOperator_RegisterHealthStatus_Call struct {
	*mock.Call
}

// RegisterHealthStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - status HealthStatus
func (_e *MockServiceProviderOperator_Expecter) RegisterHealthStatus(ctx interface{}, status interface{}) *MockServiceProviderOperator_RegisterHealthStatus_Call {
	return &MockServiceProviderOperator_RegisterHealthStatus_Call{Call: _e.mock.On("RegisterHealthStatus", ctx, status)}
}

func (_c *MockServiceProviderOperator_RegisterHealthStatus_Call) Run(run func(ctx context.Context, status HealthStatus)) *MockServiceProviderOperator_RegisterHealthStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(HealthStatus))
	})
	return _c
}

func (_c *MockServiceProviderOperator_RegisterHealthStatus_Call) Return(_a0 error) *MockServiceProviderOperator_RegisterHealthStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceProviderOperator_RegisterHealthStatus_Call) RunAndReturn(run func(context.Context, HealthStatus) error) *MockServiceProviderOperator_RegisterHealthStatus_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockServiceProviderOperator interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockServiceProviderOperator creates a new instance of MockServiceProviderOperator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockServiceProviderOperator(t mockConstructorTestingTNewMockServiceProviderOperator) *MockServiceProviderOperator {
	mock := &MockServiceProviderOperator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
