// Code generated by mockery v2.26.1. DO NOT EDIT.

package queue

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockOperator is an autogenerated mock type for the Operator type
type MockOperator struct {
	mock.Mock
}

type MockOperator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOperator) EXPECT() *MockOperator_Expecter {
	return &MockOperator_Expecter{mock: &_m.Mock}
}

// Pop provides a mock function with given fields: ctx
func (_m *MockOperator) Pop(ctx context.Context) (*Item, error) {
	ret := _m.Called(ctx)

	var r0 *Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*Item, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *Item); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperator_Pop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pop'
type MockOperator_Pop_Call struct {
	*mock.Call
}

// Pop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockOperator_Expecter) Pop(ctx interface{}) *MockOperator_Pop_Call {
	return &MockOperator_Pop_Call{Call: _e.mock.On("Pop", ctx)}
}

func (_c *MockOperator_Pop_Call) Run(run func(ctx context.Context)) *MockOperator_Pop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockOperator_Pop_Call) Return(_a0 *Item, _a1 error) *MockOperator_Pop_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperator_Pop_Call) RunAndReturn(run func(context.Context) (*Item, error)) *MockOperator_Pop_Call {
	_c.Call.Return(run)
	return _c
}

// Push provides a mock function with given fields: ctx, item
func (_m *MockOperator) Push(ctx context.Context, item *Item) error {
	ret := _m.Called(ctx, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Item) error); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOperator_Push_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Push'
type MockOperator_Push_Call struct {
	*mock.Call
}

// Push is a helper method to define mock.On call
//   - ctx context.Context
//   - item *Item
func (_e *MockOperator_Expecter) Push(ctx interface{}, item interface{}) *MockOperator_Push_Call {
	return &MockOperator_Push_Call{Call: _e.mock.On("Push", ctx, item)}
}

func (_c *MockOperator_Push_Call) Run(run func(ctx context.Context, item *Item)) *MockOperator_Push_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Item))
	})
	return _c
}

func (_c *MockOperator_Push_Call) Return(_a0 error) *MockOperator_Push_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOperator_Push_Call) RunAndReturn(run func(context.Context, *Item) error) *MockOperator_Push_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockOperator interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockOperator creates a new instance of MockOperator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockOperator(t mockConstructorTestingTNewMockOperator) *MockOperator {
	mock := &MockOperator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
