// Code generated by mockery v2.26.1. DO NOT EDIT.

package queue

import mock "github.com/stretchr/testify/mock"

// MockOperatorFactory is an autogenerated mock type for the OperatorFactory type
type MockOperatorFactory struct {
	mock.Mock
}

type MockOperatorFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOperatorFactory) EXPECT() *MockOperatorFactory_Expecter {
	return &MockOperatorFactory_Expecter{mock: &_m.Mock}
}

// CreateOperator provides a mock function with given fields: option
func (_m *MockOperatorFactory) CreateOperator(option Option) Operator {
	ret := _m.Called(option)

	var r0 Operator
	if rf, ok := ret.Get(0).(func(Option) Operator); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Operator)
		}
	}

	return r0
}

// MockOperatorFactory_CreateOperator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOperator'
type MockOperatorFactory_CreateOperator_Call struct {
	*mock.Call
}

// CreateOperator is a helper method to define mock.On call
//   - option Option
func (_e *MockOperatorFactory_Expecter) CreateOperator(option interface{}) *MockOperatorFactory_CreateOperator_Call {
	return &MockOperatorFactory_CreateOperator_Call{Call: _e.mock.On("CreateOperator", option)}
}

func (_c *MockOperatorFactory_CreateOperator_Call) Run(run func(option Option)) *MockOperatorFactory_CreateOperator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Option))
	})
	return _c
}

func (_c *MockOperatorFactory_CreateOperator_Call) Return(_a0 Operator) *MockOperatorFactory_CreateOperator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOperatorFactory_CreateOperator_Call) RunAndReturn(run func(Option) Operator) *MockOperatorFactory_CreateOperator_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockOperatorFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockOperatorFactory creates a new instance of MockOperatorFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockOperatorFactory(t mockConstructorTestingTNewMockOperatorFactory) *MockOperatorFactory {
	mock := &MockOperatorFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
