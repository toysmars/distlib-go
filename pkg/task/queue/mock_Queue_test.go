// Code generated by mockery v2.26.1. DO NOT EDIT.

package queue

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	task "github.com/toysmars/distlib-go/pkg/task"

	time "time"
)

// MockQueue is an autogenerated mock type for the Queue type
type MockQueue struct {
	mock.Mock
}

type MockQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueue) EXPECT() *MockQueue_Expecter {
	return &MockQueue_Expecter{mock: &_m.Mock}
}

// Pop provides a mock function with given fields: ctx
func (_m *MockQueue) Pop(ctx context.Context) (*Item, error) {
	ret := _m.Called(ctx)

	var r0 *Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*Item, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *Item); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueue_Pop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pop'
type MockQueue_Pop_Call struct {
	*mock.Call
}

// Pop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQueue_Expecter) Pop(ctx interface{}) *MockQueue_Pop_Call {
	return &MockQueue_Pop_Call{Call: _e.mock.On("Pop", ctx)}
}

func (_c *MockQueue_Pop_Call) Run(run func(ctx context.Context)) *MockQueue_Pop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQueue_Pop_Call) Return(_a0 *Item, _a1 error) *MockQueue_Pop_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueue_Pop_Call) RunAndReturn(run func(context.Context) (*Item, error)) *MockQueue_Pop_Call {
	_c.Call.Return(run)
	return _c
}

// Push provides a mock function with given fields: ctx, _a1
func (_m *MockQueue) Push(ctx context.Context, _a1 *task.Task) (*Item, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *task.Task) (*Item, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *task.Task) *Item); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *task.Task) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueue_Push_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Push'
type MockQueue_Push_Call struct {
	*mock.Call
}

// Push is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *task.Task
func (_e *MockQueue_Expecter) Push(ctx interface{}, _a1 interface{}) *MockQueue_Push_Call {
	return &MockQueue_Push_Call{Call: _e.mock.On("Push", ctx, _a1)}
}

func (_c *MockQueue_Push_Call) Run(run func(ctx context.Context, _a1 *task.Task)) *MockQueue_Push_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*task.Task))
	})
	return _c
}

func (_c *MockQueue_Push_Call) Return(_a0 *Item, _a1 error) *MockQueue_Push_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueue_Push_Call) RunAndReturn(run func(context.Context, *task.Task) (*Item, error)) *MockQueue_Push_Call {
	_c.Call.Return(run)
	return _c
}

// TryPop provides a mock function with given fields: ctx, timeout
func (_m *MockQueue) TryPop(ctx context.Context, timeout time.Duration) (*Item, error) {
	ret := _m.Called(ctx, timeout)

	var r0 *Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) (*Item, error)); ok {
		return rf(ctx, timeout)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) *Item); ok {
		r0 = rf(ctx, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Duration) error); ok {
		r1 = rf(ctx, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueue_TryPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TryPop'
type MockQueue_TryPop_Call struct {
	*mock.Call
}

// TryPop is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
func (_e *MockQueue_Expecter) TryPop(ctx interface{}, timeout interface{}) *MockQueue_TryPop_Call {
	return &MockQueue_TryPop_Call{Call: _e.mock.On("TryPop", ctx, timeout)}
}

func (_c *MockQueue_TryPop_Call) Run(run func(ctx context.Context, timeout time.Duration)) *MockQueue_TryPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration))
	})
	return _c
}

func (_c *MockQueue_TryPop_Call) Return(_a0 *Item, _a1 error) *MockQueue_TryPop_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueue_TryPop_Call) RunAndReturn(run func(context.Context, time.Duration) (*Item, error)) *MockQueue_TryPop_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockQueue interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockQueue creates a new instance of MockQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockQueue(t mockConstructorTestingTNewMockQueue) *MockQueue {
	mock := &MockQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
