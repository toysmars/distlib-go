// Code generated by mockery v2.26.1. DO NOT EDIT.

package redisop

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	queue "github.com/toysmars/distlib-go/pkg/task/queue"

	servicediscovery "github.com/toysmars/distlib-go/pkg/servicediscovery"

	task "github.com/toysmars/distlib-go/pkg/task"
)

// MockOperator is an autogenerated mock type for the Operator type
type MockOperator struct {
	mock.Mock
}

type MockOperator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOperator) EXPECT() *MockOperator_Expecter {
	return &MockOperator_Expecter{mock: &_m.Mock}
}

// DeregisterHealthStatus provides a mock function with given fields: ctx, identity
func (_m *MockOperator) DeregisterHealthStatus(ctx context.Context, identity servicediscovery.Identity) error {
	ret := _m.Called(ctx, identity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, servicediscovery.Identity) error); ok {
		r0 = rf(ctx, identity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOperator_DeregisterHealthStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeregisterHealthStatus'
type MockOperator_DeregisterHealthStatus_Call struct {
	*mock.Call
}

// DeregisterHealthStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - identity servicediscovery.Identity
func (_e *MockOperator_Expecter) DeregisterHealthStatus(ctx interface{}, identity interface{}) *MockOperator_DeregisterHealthStatus_Call {
	return &MockOperator_DeregisterHealthStatus_Call{Call: _e.mock.On("DeregisterHealthStatus", ctx, identity)}
}

func (_c *MockOperator_DeregisterHealthStatus_Call) Run(run func(ctx context.Context, identity servicediscovery.Identity)) *MockOperator_DeregisterHealthStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(servicediscovery.Identity))
	})
	return _c
}

func (_c *MockOperator_DeregisterHealthStatus_Call) Return(_a0 error) *MockOperator_DeregisterHealthStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOperator_DeregisterHealthStatus_Call) RunAndReturn(run func(context.Context, servicediscovery.Identity) error) *MockOperator_DeregisterHealthStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ListHealthStatus provides a mock function with given fields: ctx, identity
func (_m *MockOperator) ListHealthStatus(ctx context.Context, identity servicediscovery.Identity) ([]servicediscovery.HealthStatus, error) {
	ret := _m.Called(ctx, identity)

	var r0 []servicediscovery.HealthStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, servicediscovery.Identity) ([]servicediscovery.HealthStatus, error)); ok {
		return rf(ctx, identity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, servicediscovery.Identity) []servicediscovery.HealthStatus); ok {
		r0 = rf(ctx, identity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]servicediscovery.HealthStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, servicediscovery.Identity) error); ok {
		r1 = rf(ctx, identity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperator_ListHealthStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListHealthStatus'
type MockOperator_ListHealthStatus_Call struct {
	*mock.Call
}

// ListHealthStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - identity servicediscovery.Identity
func (_e *MockOperator_Expecter) ListHealthStatus(ctx interface{}, identity interface{}) *MockOperator_ListHealthStatus_Call {
	return &MockOperator_ListHealthStatus_Call{Call: _e.mock.On("ListHealthStatus", ctx, identity)}
}

func (_c *MockOperator_ListHealthStatus_Call) Run(run func(ctx context.Context, identity servicediscovery.Identity)) *MockOperator_ListHealthStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(servicediscovery.Identity))
	})
	return _c
}

func (_c *MockOperator_ListHealthStatus_Call) Return(_a0 []servicediscovery.HealthStatus, _a1 error) *MockOperator_ListHealthStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperator_ListHealthStatus_Call) RunAndReturn(run func(context.Context, servicediscovery.Identity) ([]servicediscovery.HealthStatus, error)) *MockOperator_ListHealthStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Pop provides a mock function with given fields: ctx, group
func (_m *MockOperator) Pop(ctx context.Context, group task.Group) (*queue.Item, error) {
	ret := _m.Called(ctx, group)

	var r0 *queue.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, task.Group) (*queue.Item, error)); ok {
		return rf(ctx, group)
	}
	if rf, ok := ret.Get(0).(func(context.Context, task.Group) *queue.Item); ok {
		r0 = rf(ctx, group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queue.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, task.Group) error); ok {
		r1 = rf(ctx, group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperator_Pop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pop'
type MockOperator_Pop_Call struct {
	*mock.Call
}

// Pop is a helper method to define mock.On call
//   - ctx context.Context
//   - group task.Group
func (_e *MockOperator_Expecter) Pop(ctx interface{}, group interface{}) *MockOperator_Pop_Call {
	return &MockOperator_Pop_Call{Call: _e.mock.On("Pop", ctx, group)}
}

func (_c *MockOperator_Pop_Call) Run(run func(ctx context.Context, group task.Group)) *MockOperator_Pop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(task.Group))
	})
	return _c
}

func (_c *MockOperator_Pop_Call) Return(_a0 *queue.Item, _a1 error) *MockOperator_Pop_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperator_Pop_Call) RunAndReturn(run func(context.Context, task.Group) (*queue.Item, error)) *MockOperator_Pop_Call {
	_c.Call.Return(run)
	return _c
}

// PopScheduled provides a mock function with given fields: ctx, group
func (_m *MockOperator) PopScheduled(ctx context.Context, group task.Group) (*queue.Item, error) {
	ret := _m.Called(ctx, group)

	var r0 *queue.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, task.Group) (*queue.Item, error)); ok {
		return rf(ctx, group)
	}
	if rf, ok := ret.Get(0).(func(context.Context, task.Group) *queue.Item); ok {
		r0 = rf(ctx, group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queue.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, task.Group) error); ok {
		r1 = rf(ctx, group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperator_PopScheduled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PopScheduled'
type MockOperator_PopScheduled_Call struct {
	*mock.Call
}

// PopScheduled is a helper method to define mock.On call
//   - ctx context.Context
//   - group task.Group
func (_e *MockOperator_Expecter) PopScheduled(ctx interface{}, group interface{}) *MockOperator_PopScheduled_Call {
	return &MockOperator_PopScheduled_Call{Call: _e.mock.On("PopScheduled", ctx, group)}
}

func (_c *MockOperator_PopScheduled_Call) Run(run func(ctx context.Context, group task.Group)) *MockOperator_PopScheduled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(task.Group))
	})
	return _c
}

func (_c *MockOperator_PopScheduled_Call) Return(_a0 *queue.Item, _a1 error) *MockOperator_PopScheduled_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperator_PopScheduled_Call) RunAndReturn(run func(context.Context, task.Group) (*queue.Item, error)) *MockOperator_PopScheduled_Call {
	_c.Call.Return(run)
	return _c
}

// Push provides a mock function with given fields: ctx, item
func (_m *MockOperator) Push(ctx context.Context, item *queue.Item) error {
	ret := _m.Called(ctx, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *queue.Item) error); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOperator_Push_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Push'
type MockOperator_Push_Call struct {
	*mock.Call
}

// Push is a helper method to define mock.On call
//   - ctx context.Context
//   - item *queue.Item
func (_e *MockOperator_Expecter) Push(ctx interface{}, item interface{}) *MockOperator_Push_Call {
	return &MockOperator_Push_Call{Call: _e.mock.On("Push", ctx, item)}
}

func (_c *MockOperator_Push_Call) Run(run func(ctx context.Context, item *queue.Item)) *MockOperator_Push_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*queue.Item))
	})
	return _c
}

func (_c *MockOperator_Push_Call) Return(_a0 error) *MockOperator_Push_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOperator_Push_Call) RunAndReturn(run func(context.Context, *queue.Item) error) *MockOperator_Push_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterHealthStatus provides a mock function with given fields: ctx, status
func (_m *MockOperator) RegisterHealthStatus(ctx context.Context, status servicediscovery.HealthStatus) error {
	ret := _m.Called(ctx, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, servicediscovery.HealthStatus) error); ok {
		r0 = rf(ctx, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOperator_RegisterHealthStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterHealthStatus'
type MockOperator_RegisterHealthStatus_Call struct {
	*mock.Call
}

// RegisterHealthStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - status servicediscovery.HealthStatus
func (_e *MockOperator_Expecter) RegisterHealthStatus(ctx interface{}, status interface{}) *MockOperator_RegisterHealthStatus_Call {
	return &MockOperator_RegisterHealthStatus_Call{Call: _e.mock.On("RegisterHealthStatus", ctx, status)}
}

func (_c *MockOperator_RegisterHealthStatus_Call) Run(run func(ctx context.Context, status servicediscovery.HealthStatus)) *MockOperator_RegisterHealthStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(servicediscovery.HealthStatus))
	})
	return _c
}

func (_c *MockOperator_RegisterHealthStatus_Call) Return(_a0 error) *MockOperator_RegisterHealthStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOperator_RegisterHealthStatus_Call) RunAndReturn(run func(context.Context, servicediscovery.HealthStatus) error) *MockOperator_RegisterHealthStatus_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockOperator interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockOperator creates a new instance of MockOperator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockOperator(t mockConstructorTestingTNewMockOperator) *MockOperator {
	mock := &MockOperator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
